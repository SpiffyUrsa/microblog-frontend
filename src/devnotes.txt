App
  - Navbar
  - Routes
    - Homepage
      - TitleList
        - TitleCard
    - NewPost
      - PostForm (add)

    - PostDetails
      - PostForm (edit)
      - CommentsList
        - PostComment 
        - AddCommentForm

Outline



Redux Store Components
- dispatch: PostForm (add and edit), 
- select: TitleList, PostDetails

Store Object Structure
{
  posts: {
    id: {
      title, description, body, comments: [#1,#2,...]
    },
    id2: {post#2},...
  }
}

Questions
1. why NewPost->PostForm desiggn? pro/con vs customizable PostForm
  - the less a form knows, the probably better; they don't dispatch actions
  - the form is an UI construct, takes typed stuff and asks someone else to do it
2. why PostList doesn't deconstruct further into PostComment?
  - "Who owns the idea of _____?"
  ! - generally start with a list and a card, versus a list that simply displays
  - what parts are wrapped up together that may need to be used elsewhere by itself
Overall: be mindful of where the logic goes; don't overload with switchiness''

Notes for self
- why don't use destructure obj more often?
  - popular for react
- review mutating more
  ! - copy the entire thing up front so you don't
- add cmd+click to vsc shortcuts 

Code Review Q's
- where should actions.js live, other redux stuff too?
- should we have used lodash to copy nested obj in rootReducer, and if so what is it called?
